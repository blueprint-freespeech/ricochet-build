# vim: filetype=yaml sw=2
debug: '[% GET ! ENV.RBM_NO_DEBUG %]'
compress_tar: gz
output_dir: 'out/[% project %]'
tmp_dir: '[% c("basedir") %]/tmp'
build_log: '[% GET ENV.RBM_LOGS_DIR ? ENV.RBM_LOGS_DIR : "logs" %]/[% project %][% IF c("var/osname") %]-[% c("var/osname") %][% END %][% IF c("var/arch") %]-[% c("var/arch") %][% END %].log'
# allow git tag signed using an expired key.
gpg_allow_expired_keys: 1
pkg_type: build

var:
  # By default, we sort the list of installed packages. This allows sharing
  # containers with identical list of packages, even if they are not listed
  # in the same order. In the cases where the installation order is
  # important, sort_deps should be set to 0.
  sort_deps: 1
  build_id: '[% sha256(c("var/build_id_txt", { num_procs => 4 })).substr(0, 6) %]'
  # constructs a string from the build source, container arch, input files
  # and generated build script
  build_id_txt: |
    [% c("version") %]
    [% IF c("git_hash") || c("hg_hash"); GET c("abbrev"); END; %]
    [% IF c("container/use_container") && ! c("container/global_disable") -%]
    [% c("var/container/suite") %]
    [% c("var/container/arch") %]
    [% END -%]
    input_files: [% c("input_files_id") %]
    build:
    [% SET step = c("step") -%]
    [% c(step, { filename => 'f', output_dir => '/out', norec => {} }) %]
  container:
    suite: bullseye
    arch: amd64
  set_default_env: |
    set -e
    set -x
    [% FOREACH env = c('ENV') -%]
    export [% env.key %]="[% env.value %]"
    [% END -%]
    rootdir=$(pwd)
    export SHELL=/bin/bash
    export HOME=$rootdir
    umask 0022
    distdir=/var/tmp/$(whoami)/dist
    projdir=$distdir/[% project %]
    builddir=/var/tmp/$(whoami)/build
    [% IF !c("container/use_container") || c("var/container/global_disable") -%]
      rm -Rf $builddir $distdir
    [% END -%]
    mkdir -p $distdir
    mkdir -p $projdir
    mkdir -p $builddir
  channel: stable
  versions:
    cmake: 3.25.2
    # updating the gcc version will update the ABI requirements on libstdc++ on Linux
    # see: https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html
    gcc: 10.5.0
    llvm-project: 16.0.4
    mingw-w64: 11.0.0
    binutils: '2.39'
    libevent: 2.1.12
    zlib: '1.3.1'
    openssl: 3.0.13
    osslsigncode: '2.7'
    tor: 0.4.8.11
    # protobuf 3.22 series adds dependency to abseil
    protobuf: 3.21.12
    qt: 5.15.13
    tor-expert-bundle: 13.0.13
    ricochet-refresh: 3.0.23
    bzip2: 1.0.8
    nsis: '3.09'
    rust: 1.74.0
    rcodesign: 0.22.0
    linuxdeploy: 1-alpha-20231026-1

targets:
  # Release channels
  stable:
    var:
      stable: 1
      channel: stable
  alpha:
    var:
      alpha: 1
      channel: alpha
  testbuild:
    var:
      testbuild: 1
      channel: testbuild
  # Sign target
  sign:
    var:
      sign: 1
  # Linux targets
  linux:
    var:
      linux: 1
      osname: linux
      os_deps:
        - build-essential
        - python
        - automake
        - libtool
        - lib32stdc++6
        - libc6-dev-i386
      build-toolchain: toolchain-linux-gcc
  linux-x86_64:
    var:
      arch: x86_64
      linux-x86_64: 1
      CFLAGS: -fPIC
      CXXFLAGS: -fPIC
      LDFLAGS:
  linux-i686:
    var:
      arch: i686
      arch_debian: i386
      arch_deps:
        - lib32stdc++6
        - libc6-dev-i386
      linux-i686: 1
      linux_cross: 1
      CFLAGS: -m32
      CXXFLAGS: -m32
      LDFLAGS: -m32
  # macOS targets
  macos:
    var:
      macos: 1
      osname: macos
      os_deps:
        - build-essential
        - python3
        - automake
        - libtool
        - zip
        - unzip
      build-toolchain: toolchain-macos-clang
      compiler_target: '[% c("var/arch") %]-apple-darwin'
  macos-aarch64:
    var:
      arch: aarch64
      arch_macos: arm64
      macos-aarch64: 1
      CFLAGS:
      CXXFLAGS:
      LDFLAGS:
      macosx_deployment_target: '11.0'
  macos-x86_64:
    var:
      arch: x86_64
      arch_macos: x86_64
      macos-x86_64: 1
      CFLAGS:
      CXXFLAGS:
      LDFLAGS:
      macosx_deployment_target: '10.14'
  # Windows targets
  windows:
    var:
      windows: 1
      osname: windows
      os_deps:
        - build-essential
        - python3
        - automake
        - libtool
        - zip
        - unzip
      build-toolchain: toolchain-windows-clang
      compiler_target: '[% c("var/arch") %]-w64-mingw32'
  windows-x86_64:
    var:
      arch: x86_64
      windows-x86_64: 1
      CFLAGS:
      CXXFLAGS:
      LDFLAGS:
  windows-i686:
    var:
      arch: i686
      windows-i686: 1
      CFLAGS:
      CXXFLAGS:
      LDFLAGS:
