#!/bin/bash
set -x
[% c("var/set_default_env") -%]
[% pc(c('var/compiler'), 'var/setup', { compiler_tarfile => c('input_files_by_name/' _ c('var/compiler')) }) %]
distdir=/var/tmp/dist/[% project %]

[% IF c("var/linux") %]
  [% pc('gcc', 'var/setup', { compiler_tarfile => c('input_files_by_name/gcc'),
                              hardened_gcc => 0 }) %]
[% END -%]

tar -C /var/tmp/dist -xf [% c('input_files_by_name/cmake') %]
export PATH="/var/tmp/dist/cmake/bin:$PATH"

# we need protoc available to build/run tests
tar -C /var/tmp/dist -xf [% c('input_files_by_name/protoc') %]

mkdir -p /var/tmp/build
tar -C /var/tmp/build -xf [% project %]-[% c('version') %].tar.gz
cd /var/tmp/build/[% project %]-[% c('version') %]

# Build with CMake, as it exposes the CMake modules for tego
cd cmake
mkdir build && cd build

# On windows, protobuf doesn't deal well with cross compiling unless the
# compilers are specified through envvars
CMAKE_FLAGS='-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX='$distdir' -Dprotobuf_WITH_ZLIB=OFF -DWITH_PROTOC=/var/tmp/dist/protoc/bin/protoc -Dprotobuf_BUILD_SHARED_LIBRARIES=OFF -Dprotobuf_BUILD_TESTS=OFF'

[% IF c("var/windows-i686") -%]
    CMAKE_FLAGS="-DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=i386 $CMAKE_FLAGS"
    export CC=/var/tmp/dist/mingw-w64/bin/i686-w64-mingw32-gcc
    export CXX=/var/tmp/dist/mingw-w64/bin/i686-w64-mingw32-g++
[% END -%]
[% IF c("var/windows-x86_64") -%]
    CMAKE_FLAGS="-DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=x86_64 $CMAKE_FLAGS"
    export CC=/var/tmp/dist/mingw-w64/bin/x86_64-w64-mingw32-gcc
    export CXX=/var/tmp/dist/mingw-w64/bin/x86_64-w64-mingw32-g++
[% END -%]
[% IF c("var/osx") -%]
    # CMake needs to be nudged into using the correct AR and RANLIB
    # TODO: We should probably define AR,RANLIB,CXX... etc for all compilers, that way we don't have to handle platforms individually, and can instead just do -DCMAKE_AR=$AR and etc for all platforms
    CMAKE_FLAGS="-DCMAKE_AR=$OSX_AR -DCMAKE_RANLIB=$OSX_RANLIB $CMAKE_FLAGS"

    export CXX=$OSX_CXX
[% END -%]

CMAKE_OPTS=( $CMAKE_FLAGS )
# setting LDFLAGS in the env prior to configuring sets LDFLAGS for all target
# types
cmake -E env LDFLAGS="[% c("var/LDFLAGS") %]" \
    cmake -S .. ${CMAKE_OPTS[@]} \
        -DCMAKE_C_FLAGS="[% c("var/CFLAGS") %]" \
        -DCMAKE_CXX_FLAGS="[% c("var/CXXFLAGS") %]" 

cmake --build . -j[% c("buildconf/num_procs") %]
cmake --build . --target install

cd /var/tmp/dist
[% c('tar', {
        tar_src => [ project ],
        tar_args => '-czf ' _ dest_dir _ '/' _ c('filename'),
    }) %]
